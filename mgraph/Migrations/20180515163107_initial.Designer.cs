// <auto-generated />
using mgraph.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace mgraph.Migrations
{
    [DbContext(typeof(GraphContext))]
    [Migration("20180515163107_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026");

            modelBuilder.Entity("mgraph.Model.Edge", b =>
                {
                    b.Property<int>("EdgeId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FromNodeId");

                    b.Property<int?>("ParentEdgeId");

                    b.Property<int>("ToNodeId");

                    b.HasKey("EdgeId");

                    b.HasIndex("FromNodeId");

                    b.HasIndex("ParentEdgeId");

                    b.HasIndex("ToNodeId");

                    b.ToTable("Edges");
                });

            modelBuilder.Entity("mgraph.Model.Node", b =>
                {
                    b.Property<int>("NodeId")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Float_value");

                    b.Property<int>("Int_value");

                    b.Property<int?>("ParentNodeId");

                    b.Property<string>("String_value");

                    b.HasKey("NodeId");

                    b.HasIndex("ParentNodeId");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("mgraph.Model.Edge", b =>
                {
                    b.HasOne("mgraph.Model.Node", "FromNode")
                        .WithMany("InEdges")
                        .HasForeignKey("FromNodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("mgraph.Model.Edge", "ParentEdge")
                        .WithMany("Children")
                        .HasForeignKey("ParentEdgeId");

                    b.HasOne("mgraph.Model.Node", "ToNode")
                        .WithMany("OutEdges")
                        .HasForeignKey("ToNodeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("mgraph.Model.Node", b =>
                {
                    b.HasOne("mgraph.Model.Node", "ParentNode")
                        .WithMany("Children")
                        .HasForeignKey("ParentNodeId");
                });
#pragma warning restore 612, 618
        }
    }
}
